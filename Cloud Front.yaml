AWSTemplateFormatVersion: 2010-09-09

Parameters:
  B1Name:
    Type: String
    Default: website-hosting-bucket
  B2Name:
    Type: String
    Default: website-hosting-bucket
  APIusagePlanName:
    Type: String
    Default: usageplan


Resources:
  LF1:
    Type: AWS::Lambda::Function
    DependsOn: photos
    Properties:
      Code:
        S3Bucket: assgn2-files-v1
        S3Key: index-photos.zip
      FunctionName: LF1_V1
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 60
      Role: arn:aws:iam::569179456476:role/assgn2_lambda_role
      Environment:
        Variables:
          REGION: us-east-1
          OSDOMAINEP: !GetAtt photos.DomainEndpoint

  LF2:
    Type: AWS::Lambda::Function
    DependsOn:
      - BotAlias
      - photos
    Properties:
      Code:
        S3Bucket: assgn2-files-v1
        S3Key: LF2.zip
      FunctionName: LF2_V1
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      MemorySize: 128
      Timeout: 60
      Role: arn:aws:iam::569179456476:role/assgn2_lambda_role
      Environment:
        Variables:
          REGION: us-east-1
          BOTID: !Ref Bot
          BOTALIASID: !Select ["0", !Split ["|", !Ref BotAlias]]
          OSDOMAINEP: !GetAtt photos.DomainEndpoint

  B1:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    Properties:
      BucketName: !Ref B1Name
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  B1BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref B1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref B1
                - /*
    DependsOn:
      - B1


  B2:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Delete
    DependsOn: LF1
    Properties:
      BucketName: !Ref B2Name
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt [LF1,Arn]
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter


  S3LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: LF1
    Properties:
      FunctionName:
        Fn::GetAtt:
          - LF1
          - Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn:
        Fn::Sub: arn:aws:s3:::${!Ref B2Name}

  ApiLambdaAuthPermission:
    Type: AWS::Lambda::Permission
    DependsOn: LF2
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LF2
          - Arn
      Principal: apigateway.amazonaws.com

  BotRuntimeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lexv2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: LexRuntimeRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'polly:SynthesizeSpeech'
                  - 'comprehend:DetectSentiment'
                Resource: '*'

  Bot:
    DependsOn: BotRuntimeRole
    Type: AWS::Lex::Bot
    Properties:
      AutoBuildBotLocales: true
      Name: SearchBot
      RoleArn: !GetAtt
        - BotRuntimeRole
        - Arn
      DataPrivacy:
        ChildDirected: false
      IdleSessionTTLInSeconds: 300
      BotFileS3Location:
        S3Bucket: assgn2-files-v1
        S3ObjectKey: SearchBotV1.zip

  BotVersionNew:
    DependsOn: Bot
    Type: 'AWS::Lex::BotVersion'
    Properties:
      BotId: !Ref Bot
      BotVersionLocaleSpecification:
        - LocaleId: en_US
          BotVersionLocaleDetails:
            SourceBotVersion: DRAFT


  BotAlias:
    DependsOn: BotVersionNew
    Type: 'AWS::Lex::BotAlias'
    Properties:
      BotId: !Ref Bot
      BotAliasName: PhotoSearchAliasv2
      BotVersion: !GetAtt
        - BotVersionNew
        - BotVersion
      SentimentAnalysisSettings:
        DetectSentiment: true

  photos:
    Type : "AWS::OpenSearchService::Domain"
    Properties:
      DomainName: photosv5
      EngineVersion: 'OpenSearch_2.9'
      NodeToNodeEncryptionOptions:
        Enabled: true
      AccessPolicies: {
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": "*"
      },
      "Action": "es:*",
      "Resource": "arn:aws:es:us-east-1:569179456476:domain/photosv3/*"
    }
  ]
}
      ClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: '1'
        InstanceType: t3.small.search
        ZoneAwarenessEnabled: false
        MultiAZWithStandbyEnabled: false
      EBSOptions:
        EBSEnabled: true
        Iops: '3000'
        VolumeSize: '10'
        VolumeType: gp3
      EncryptionAtRestOptions:
        Enabled: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: master
          MasterUserPassword: 'Columbia@123'
      DomainEndpointOptions:
        EnforceHTTPS: true


  MyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyAPI
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - Regional
      BodyS3Location:
        Bucket: assgn2-files-v1
        Key: CCBDA2-Api2Stage1-swagger-apigateway.json

  MyApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: MyAPI
    Properties:
      RestApiId: !Ref MyAPI

  MyApiStage:
    Type: "AWS::ApiGateway::Stage"
    DependsOn: "MyApiDeployment"
    Properties:
      RestApiId: !Ref MyAPI
      DeploymentId: !Ref MyApiDeployment
      StageName: "test_stage_v2"

  usagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    Properties:
      ApiStages:
        - ApiId: !Ref MyAPI
          Stage: !Ref MyApiStage
      Description: Customer ABC's usage plan
      Quota:
        Limit: 10000
        Period: MONTH
      Throttle:
        BurstLimit: 1000
        RateLimit: 100
      UsagePlanName: !Ref APIusagePlanName

  MyUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: 'l4afmv9cw4'
      KeyType: "API_KEY"
      UsagePlanId: !Ref usagePlan


Outputs:
  outputWebsiteURL:
    Value: !GetAtt
      - B1
      - WebsiteURL
    Description: Static website URL

  BotID:
    Value: !Ref Bot

  BotAliasID:
    Value: !Select ["0", !Split ["|", !Ref BotAlias]]